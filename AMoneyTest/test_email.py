import pytest
import requests
import psycopg2
from appium import webdriver
from appium.webdriver.common.appiumby import AppiumBy
from appium.options.android import UiAutomator2Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import time
import re

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Appium
capabilities = {
    "platformName": "Android",
    "automationName": "uiautomator2",
    "deviceName": "emulator-5554"
}
capabilities_options = UiAutomator2Options().load_capabilities(capabilities)
appium_server_url = "http://localhost:4723"


#  –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–∞
@pytest.fixture(scope="module")
def driver():
    app_driver = webdriver.Remote(appium_server_url, options=capabilities_options)
    yield app_driver
    app_driver.quit()


#  –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ë–î
@pytest.fixture(scope="module")
def db_connection():
    conn = psycopg2.connect(
        dbname="adengi",
        user="adengi_team",
        password="xpt2od18FxmZPeyw",
        host="stage01.adengi.tech",
        port="5432"
    )
    yield conn
    conn.rollback()  # –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    conn.close()


def open_AMoney(driver):
    aps = driver.find_element(by=AppiumBy.XPATH, value="//*[contains(@text, '–ê –¥–µ–Ω—å–≥–∏')]")
    aps.click()


def onbording(driver):
    # –ü—Ä–æ—Ö–æ–¥ –ø–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É
    for expected_text in [
        "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥–µ–Ω—å–≥–∞–º–∏\n–±–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤",
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∞–Ω–∫–µ—Ç—É\n–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É –ª—é–±–æ–≥–æ –±–∞–Ω–∫–∞",
        "–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞—ë–º\n–¥–∞–∂–µ —Å –ø–ª–æ—Ö–æ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π"
    ]:
        el = WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located(
                (AppiumBy.XPATH, '//android.widget.TextView[@resource-id="ru.adengi:id/textDescription"]'))
        )
        assert el.text == expected_text, f"–û–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç '{expected_text}', –Ω–æ –Ω–∞–π–¥–µ–Ω: '{el.text}'"
        driver.find_element(by=AppiumBy.ID, value='ru.adengi:id/buttonNext').click()

    # –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((AppiumBy.ID, 'ru.adengi:id/text_policy'))
    )
    driver.find_element(by=AppiumBy.ID, value='ru.adengi:id/buttonNext').click()

    # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((AppiumBy.ID, 'ru.adengi:id/description'))
    )
    driver.find_element(by=AppiumBy.ID, value='ru.adengi:id/declineButton').click()


#  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def fast_registration_skip(driver):
    button_get_money = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((AppiumBy.ID, 'ru.adengi:id/buttonGetMoney'))
    )
    button_get_money.click()

    # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä
    phone_element = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((AppiumBy.ID, "ru.adengi:id/editTextPhone"))
    )
    phone_number = phone_element.text.strip()

    # –£–±–∏—Ä–∞–µ–º `+` –∏ –ø—Ä–æ–±–µ–ª—ã
    phone_number = re.sub(r"\D", "", phone_number)

    print(f"üì± –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}")

    button_continue_1 = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located(
            (AppiumBy.XPATH, '//android.widget.Button[@resource-id="ru.adengi:id/buttonContinue"]')))
    button_continue_1.click()

    button_continue_2 = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located(
            (AppiumBy.XPATH, '//android.widget.Button[@resource-id="ru.adengi:id/buttonContinue"]')))
    button_continue_2.click()

    button_continue_3 = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located(
            (AppiumBy.XPATH, '//android.widget.Button[@resource-id="ru.adengi:id/continueButton"]')))
    button_continue_3.click()

    button_continue_4 = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located(
            (AppiumBy.XPATH, '//android.widget.Button[@resource-id="ru.adengi:id/buttonContinue"]')))
    button_continue_4.click()

    button_continue_5 = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located(
            (AppiumBy.XPATH, '//android.widget.Button[@resource-id="ru.adengi:id/buttonAction"]')))
    button_continue_5.click()

    return phone_number


#  –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@pytest.fixture(scope="module")
def registered_phone_number(driver):
    """–ü—Ä–æ—Ö–æ–¥–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    open_AMoney(driver)
    onbording(driver)
    phone_number = fast_registration_skip(driver)

    assert phone_number, "–û—à–∏–±–∫–∞! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω."
    return phone_number

def check_text_not_present(driver):
    # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–π
    button_notification = WebDriverWait(driver, 10).until(
        EC.visibility_of_element_located((AppiumBy.ID, 'ru.adengi:id/nav_notification')))
    button_notification.click()

    try:
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å –¥–∞–Ω–Ω—ã–º –ª–æ–∫–∞—Ç–æ—Ä–æ–º –ù–ï –±—É–¥–µ—Ç –≤–∏–¥–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
        WebDriverWait(driver, 10).until(EC.invisibility_of_element_located(
            (AppiumBy.XPATH, '//android.widget.TextView[@resource-id="ru.adengi:id/textTitle"]')))
        print("–ù–∞–¥–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ.")
    except TimeoutException:
        # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º, —Ç–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –æ–Ω –≤—Å—ë –∂–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω
        print("–ù–∞–¥–ø–∏—Å—å –≤—Å—ë –µ—â—ë –≤–∏–¥–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.")


#  –§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
@pytest.fixture(scope="module")
def access_token(registered_phone_number):
    TOKEN_URL = "https://stage01.adengi.tech/api/v1/oauth/token"
    data = {
        "client_id": 100,
        "client_secret": "secret",
        "grant_type": "password",
        "password": "123456",
        "username": registered_phone_number
    }

    response = requests.post(TOKEN_URL, json=data)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, {response.text}"

    tokens = response.json()
    ACCESS_TOKEN = tokens.get("access_token")
    assert ACCESS_TOKEN, "–û—à–∏–±–∫–∞! Access token –Ω–µ –ø–æ–ª—É—á–µ–Ω."

    return ACCESS_TOKEN


#  –¢–µ—Å—Ç API-–∑–∞–ø—Ä–æ—Å–∞
def test_get_client_info(access_token):
    URL = "https://stage01.adengi.tech/api/v1/client/me"
    HEADERS = {"Authorization": f"Bearer {access_token}"}

    response = requests.get(URL, headers=HEADERS)
    assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}, {response.text}"

    data = response.json()
    client_id = data.get("client", {}).get("client", {}).get("id")
    assert client_id, "–û—à–∏–±–∫–∞! client_id –Ω–µ –ø–æ–ª—É—á–µ–Ω."

    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω client_id: {client_id}")


#  –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ë–î
def test_find_user(db_connection, access_token):
    cursor = db_connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º client_id —á–µ—Ä–µ–∑ API
    URL = "https://stage01.adengi.tech/api/v1/client/me"
    HEADERS = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(URL, headers=HEADERS)
    data = response.json()
    client_id = data.get("client", {}).get("client", {}).get("id")

    assert client_id, "–û—à–∏–±–∫–∞! client_id –Ω–µ –ø–æ–ª—É—á–µ–Ω."


    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    cursor.execute("SELECT * FROM email_confirmations WHERE client_id = %s", (client_id,))
    user = cursor.fetchone()
    assert user, "–û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ email_confirmation."

    email_confirmation_id = user[0]
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID: {user[0]}, Client ID: {user[1]}, Email: {user[2]}, Type: {user[3]}")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    cursor.execute(
        "SELECT * FROM email_confirmation_codes WHERE email_confirmation_id = %s",
        (email_confirmation_id,))
    verification = cursor.fetchone()
    assert verification, "–û—à–∏–±–∫–∞! –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω."

    verification_id = verification[0]
    new_code = "333333"

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –≤ –ë–î
    cursor.execute("UPDATE email_confirmation_codes SET code = %s WHERE id = %s", (new_code, verification_id))
    db_connection.commit()
    print(f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: {new_code}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ API
    post_url = "https://stage01.adengi.tech/api/v1/email_confirmation/confirm"
    post_headers = {
        "Authorization": f"Bearer {access_token}",
        "Content-Type": "application/json"
    }
    post_body = {"code": new_code}

    post_response = requests.post(post_url, headers=post_headers, json=post_body)
    assert post_response.status_code == 200, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {post_response.status_code}, {post_response.text}"
    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {post_response.json()}")

    check_text_not_present(driver)